Introduction:
You work for an online fruits store, and you need to develop a system that will 
update the catalog information with data provided by your suppliers. The suppliers 
send the data as large images with an associated description of the products in 
two files (.TIF for the image and .txt for the description). The images need to be 
converted to smaller jpeg images and the text needs to be turned into an HTML file 
that shows the image and the product description. The contents of the HTML file 
need to be uploaded to a web service that is already running using Django. You also 
need to gather the name and weight of all fruits from the .txt files and use a Python 
request to upload it to your Django server. You will create a Python script that will 
process the images and descriptions and then update your company's online website to 
add the new products. Once the task is complete, the supplier should be notified with 
an email that indicates the total weight of fruit (in lbs) that were uploaded. The email 
should have a PDF attached with the name of the fruit and its total weight (in lbs).  
Finally, in parallel to the automation running, we want to check the health of the system 
and send an email if something goes wrong.  

What youâ€™ll do:
Write a script that summarizes and processes sales data into different categories  
Generate a PDF using Python
Automatically send a PDF by email  
Write a script to check the health status of the system  

I need to resize and convert images, So I'll use PIL.
I need to send stuff to a website so I'll use Requests
I need to make a PDF so I'll use ReportLab
I need to build and send an email so I'll use smtplib & email. *Seems a bit on the nose. lol*
I need to monitor CPU usage, disk space, available memory and name resolution, so I'll use shutil & psutil

Files the project is looking for:
changeImage.py: DONE!
	change image from 3000X2000 to 600X400. 
	and change image format from .TIFF to .JPEG.
	convert from RGBA to RGB.
	images will be in "/supplier-data/images/".
	import PIL
supplier_image_upload.py: DONE!
	upload images from "/supplier-data/images/" to the website.
	use example_upload.py as a base for this file.
	url will be [linux-instance-IP-Address]/upload
	import requests
run.py: DONE!
	process each text file into the format below and push it to the website.
	remove "lbs" from the weight and turn into an integer
	format will be: {"name": "Test Fruit", "weight": 100, "description": "This is the description of my test fruit", "image_name": "icon.sheet.png"}
	url will be http://[linux-instance-external-IP]/fruits
	import os
	import requests
reports.py: Done!
	this will take the .txt files in "/supplier-data/descriptions/"
	it will use the name and weight lines from each text file.
	it will build this into a PDF file.
	must have a function called "generate_report"
	PDF file must be named "processed.pdf"
	import reportlab
report_email.py: Done!
	import os
	import datetime
	import reports (my reports.py)
	imports emails (my emails.py)
	use dunder main to call the generate_report function from reports.py
	reports.generate_report(attachment, title, paragraph)
	attachment = "/tmp/processed.pdf"
emails.py: Done!
	this will have the functionality to build an email and send it.
	must have "generate_email" and "send_email" functions
	
health_check.py Done!
	report an error if CPU usage is over 80%
	report an error if available disk space is lower than 20%
	report an error if available memory is less than 500MB
	report an error if hostname "localhost" cannot be resolved to "127.0.0.1"
	emails if there are any issues.
	install and use "stress" to test the functionality.
	set up a cron job to run health_check.py every 60 seconds.
	import shutil
	import psutil
